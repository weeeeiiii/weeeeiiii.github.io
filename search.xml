<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kotlin(三)之泛型</title>
      <link href="archives/f1d5510e.html"/>
      <url>archives/f1d5510e.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><ul><li>C++有模板类，Java有泛型，其底层都是通过类型占位替换来实现</li><li>Kotlin对于泛型改动略大，与Java写法不同，引入了out与int来处理泛型的场景</li></ul></blockquote><h2 id="二、泛型"><a href="#二、泛型" class="headerlink" title="二、泛型"></a>二、泛型</h2><ul><li><p>与Java类似，Kotlin中的类也可以有类型参数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Box<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> value <span class="token operator">=</span> t  <span class="token punctuation">}</span></code></pre></li><li><p>创建这样的类的实例，我们需要提供类型参数：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> box<span class="token operator">:</span> Box<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token operator">=</span> Box<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li><li><p>但是如果类型参数可以推断出来，例如从构造函数的参数或者从其他途径，允许省略类型参数：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> box <span class="token operator">=</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 具有类型 Int，所以编译器知道我们说的是 Box&lt;Int>。</span></code></pre></li></ul><h2 id="三、生产者与消费者"><a href="#三、生产者与消费者" class="headerlink" title="三、生产者与消费者"></a>三、生产者与消费者</h2><p>在Java泛型里，有通配符这种东西，我们要用<code>? extends T</code>指定类型参数的上限，用<code>? super T</code>指定类型参数的下限。Kotlin则抛弃了这个系统引用了生产者与消费者这个概念。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li>这是 Collection 接口的add() 和 addAll() 方法，传入它们的类型参数一个是 E ，一个是 ? extends E，为什么呢？这两个方法之间不就是批量操作的区别吗？为什么一个只接受 E 类型的参数，另一个却接受 ? extend E 的类型？</li><li>这就要引入一个概念，型变，那么什么是型变呢？我们看下面</li></ul><h3 id="型变"><a href="#型变" class="headerlink" title="型变"></a>型变</h3><blockquote><p>首先思考，Java为什么需要复杂的通配符？</p></blockquote><ul><li><p>为什么 Java 需要那些神秘的通配符。在 <a href="http://www.oracle.com/technetwork/java/effectivejava-136174.html">Effective Java</a> 解释了该问题——第28条：<em>利用有限制通配符来提升 API 的灵活性</em>。</p></li><li><p>Java中泛型是不型变的，这意味着 <code>List&lt;String&gt;</code> 并<strong>不是</strong> <code>List&lt;Object&gt;</code>的子类型。 为什么这样？ 如果 List 不是<strong>不型变的</strong>，它就没比 Java 的数组好到哪去，因为如下代码会通过编译然后导致运行时异常：</p></li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> objs <span class="token operator">=</span> strs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ！！！此处的编译器错误让我们避免了之后的运行时异常</span>objs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里我们把一个整数放入一个字符串列表</span>String s <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ！！！ ClassCastException：无法将整数转换为字符串</span></code></pre><ul><li>因此，Java 禁止这样的事情以保证运行时的安全。但这样会有一些影响。例如，考虑 <code>Collection</code> 接口中的 <code>addAll()</code> 方法。该方法的签名应该是什么？直觉上，我们会这样：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> …… <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>E<span class="token operator">></span> items<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>但随后，我们就无法做到以下简单的事情（这是完全安全）：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">copyAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>Object<span class="token operator">></span> to<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>  to<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ！！！对于这种简单声明的 addAll 将不能编译：</span>  <span class="token comment" spellcheck="true">// Collection&lt;String> 不是 Collection&lt;Object> 的子类型</span><span class="token punctuation">}</span></code></pre><h3 id="Java中的通配符？extends-E"><a href="#Java中的通配符？extends-E" class="headerlink" title="Java中的通配符？extends E"></a>Java中的通配符？extends E</h3><ul><li><code>? extends E</code> 表示此方法接受 <code>E</code> 或者 <code>E</code> 的子类的类型对象的集合。注意，其是一个集合。</li><li>简单的说就是接收的类型必须是E或者其子类的集合。理解这点很重要</li><li>例如：对于一个 Collection 来说，因为 String 是 Object 的子类型，一个 String 对象就是 Object 类型，所以可以直接把它添加入 Collection 里，所以add() 方法的类型参数可以设为 E；而想把 Collection 添加入 Collection 时，因为 Java 泛型不型变的原因，就会出现编译错误，必须用 <code>? extends E</code> 将 Collection 囊括到 Collection 里。</li></ul><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>使用 <code>? extends E</code> 定义的集合，我们可以安全地从其中（该集合中的元素是 E 的子类的实例）<strong>读取</strong> <code>E</code>，但<strong>不能写入</strong>，因为Java的范型是不型变的如List。</p><ul><li>简而言之，带 <strong>extends</strong> 限定（<strong>上界</strong>）的通配符类型使得类型是<strong>协变的（covariant）</strong>。</li></ul><h3 id="Java中的通配符-super-E"><a href="#Java中的通配符-super-E" class="headerlink" title="Java中的通配符 ? super E"></a>Java中的通配符 ? super E</h3><ul><li>在 Java 中还有一个通配符 <code>List&lt;? super String&gt;</code> ，其意思是List存储的必须是String或者String的父类，super限定（下限）的通配符，带<strong>super</strong>的我们称之为逆变性（contravariance），并且对于 <code>List &lt;? super String&gt;</code> 你只能调用接受 String 作为参数的方法</li><li>（例如，你可以调用 <code>add(String)</code> 或者 <code>set(int, String)</code>），当然&lt;!–</li><li>如果调用函数返回 <code>List&lt;T&gt;</code> 中的 <code>T</code>，你得到的并非一个 <code>String</code> 而是一个 <code>Object</code>。</li></ul><h3 id="生产者、消费者概念的来源"><a href="#生产者、消费者概念的来源" class="headerlink" title="生产者、消费者概念的来源"></a>生产者、消费者概念的来源</h3><ul><li>Joshua Bloch 称那些你只能从中<strong>安全读取</strong>的对象为<strong>生产者</strong>，并称那些你只能<strong>安全写入</strong>的对象为<strong>消费者</strong>。安全这点的理解很重要。</li><li>他建议：“<em>为了灵活性最大化，在表示生产者或消费者的输入参数上使用通配符类型</em>”，并提出了以下助记符：</li></ul><blockquote><p><em>PECS 代表生产者-Extens，消费者-Super（Producer-Extends, Consumer-Super）。</em></p></blockquote><ul><li><em>注意</em>：如果你使用一个生产者对象，如 <code>List&lt;? extends Foo&gt;</code>，在该对象上不允许调用 <code>add()</code> 或 <code>set()</code>。但这并不意味着该对象是<strong>不可变的</strong>：例如，没有什么阻止你调用 <code>clear()</code>从列表中删除所有项目，因为 <code>clear()</code> 根本无需任何参数。通配符（或其他类型的型变）保证的唯一的事情是<strong>类型安全</strong>。不可变性完全是另一回事。而对于生产者、消费者，其对应的具体实现则为声明处型变和类型投影，接下来我们将详细讲解这两个特性。</li></ul><h2 id="四、声明处型变"><a href="#四、声明处型变" class="headerlink" title="四、声明处型变"></a>四、声明处型变</h2><ul><li><p>假设有一个泛型接口 <code>Source&lt;T&gt;</code>，该接口中不存在任何以 <code>T</code> 作为参数的方法，只是方法返回 <code>T</code> 类型值：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">interface</span> <span class="token class-name">Source</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>      T <span class="token function">nextT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>那么，在 <code>Source &lt;Object&gt;</code> 类型的变量中存储 <code>Source &lt;String&gt;</code> 实例的引用是极为安全的——没有消费者-方法可以调用。但是 Java 并不知道这一点，并且仍然禁止这样操作：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span>Source<span class="token operator">&lt;</span>String<span class="token operator">></span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Source<span class="token operator">&lt;</span>Object<span class="token operator">></span> objects <span class="token operator">=</span> strs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ！！！在 Java 中不允许</span>      <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span></code></pre></li><li><p>为了修正这一点，我们必须声明对象的类型为 <code>Source&lt;? extends Object&gt;</code>，这是毫无意义的，因为我们可以像以前一样在该对象上调用所有相同的方法，所以更复杂的类型并没有带来价值。但编译器并不知道。</p></li><li><p>在 Kotlin 中，有一种方法向编译器解释这种情况。这称为<strong>声明处型变</strong>：我们可以标注 <code>Source</code> 的<strong>类型参数</strong> <code>T</code> 来确保它仅从 <code>Source&lt;T&gt;</code> 成员中<strong>返回</strong>（生产），并从不被消费。</p></li><li><p>为此，我们提供 <strong>out</strong> 修饰符：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">abstract</span> <span class="token keyword">class</span> Source<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">nextT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> <span class="token function">demo</span><span class="token punctuation">(</span>strs<span class="token operator">:</span> Source<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">val</span> objects<span class="token operator">:</span> Source<span class="token operator">&lt;</span>Any<span class="token operator">></span> <span class="token operator">=</span> strs <span class="token comment" spellcheck="true">// 这个没问题，因为 T 是一个 out-参数</span>          <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span></code></pre></li><li><p>一般原则是：当一个类 <code>C</code> 的类型参数 <code>T</code> 被声明为 <strong>out</strong> 时，它就只能出现在 <code>C</code> 的成员的<strong>输出</strong>-位置，但回报是 <code>C&lt;Base&gt;</code> 可以安全地作为<code>C&lt;Derived&gt;</code>的超类。</p></li><li><p>对应我们的例子就是，Source类的类型参数T被声明为out时，T只能作为Source类中成员的返回类型，如函数。这样子做的好处是，我们可以直接T类型的子类的集合直接安全的设置给T类型的集合</p></li><li><p>简而言之，他们说类 <code>Source</code> 是在参数 <code>T</code> 上是<strong>协变的</strong>，或者说 <code>T</code> 是一个<strong>协变的</strong>类型参数。</p></li><li><p>你可以认为 <code>Source</code> 是 <code>T</code> 的<strong>生产者</strong>，而不是 <code>T</code> 的<strong>消费者</strong>。</p></li><li><p><strong>out</strong>修饰符称为<strong>型变注解</strong>，并且由于它在类型参数声明处提供，所以我们讲<strong>声明处型变</strong>。</p></li><li><p>这与 Java 的<strong>使用处型变</strong>相反，其类型用途通配符使得类型协变。使用处型变就是接收一个集合时强制转换。</p></li><li><p>另外除了 <strong>out</strong>，Kotlin 又补充了一个型变注释：<strong>in</strong>。它使得一个类型参数<strong>逆变</strong>：只可以被消费而不可以&lt;!–</p></li><li><p>-&gt;被生产。逆变类的一个很好的例子是 <code>Comparable</code>：</p></li></ul><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">abstract</span> <span class="token keyword">class</span> Comparable<span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">demo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1.0 拥有类型 Double，它是 Number 的子类型</span>            <span class="token comment" spellcheck="true">// 因此，我们可以将 x 赋给类型为 Comparable &lt;Double> 的变量</span>            <span class="token keyword">val</span> y<span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>Double<span class="token operator">></span> <span class="token operator">=</span> x <span class="token comment" spellcheck="true">// OK！</span>    <span class="token punctuation">}</span></code></pre><ul><li><p>我们相信 <strong>in</strong> 和 <strong>out</strong> 两词是自解释的（因为它们已经在 C# 中成功使用很长时间了），</p></li><li><p>因此上面提到的助记符不是真正需要的，并且可以将其改写为更高的目标：</p></li><li><p>其out和in也就是kotlin为我们划分了特定的场景，避免我们进行强制转换。</p></li><li><p>例如第一个例子：</p><pre class=" language-kotlin"><code class="language-kotlin">   <span class="token comment" spellcheck="true">//设置</span>      <span class="token keyword">val</span> objects<span class="token operator">:</span> Source<span class="token operator">&lt;</span>Any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>Source<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">)</span>strs   <span class="token comment" spellcheck="true">//接收</span>  <span class="token keyword">val</span> result<span class="token operator">:</span>Source<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>Source<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span>objects      <span class="token comment" spellcheck="true">// ……</span></code></pre></li><li><p>这就需要我们人为去控制风险了。</p></li></ul><h2 id="五、类型投影"><a href="#五、类型投影" class="headerlink" title="五、类型投影"></a>五、类型投影</h2><ul><li><p>使用处型变：类型投影</p></li><li><p>将类型参数 T 声明为 <em>out</em> 非常方便，并且能避免使用处子类型化的麻烦，但是有些类实际上<strong>不能</strong>限制为只返回 <code>T</code>！</p></li><li><p>一个很好的例子是 Array：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">class</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">val</span> size<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">/* …… */</span> <span class="token punctuation">}</span>          <span class="token keyword">fun</span> <span class="token keyword">set</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">,</span> value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">/* …… */</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>该类在 <code>T</code> 上既不能是协变的也不能是逆变的。这造成了一些不灵活性。考虑下述函数：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">copy</span><span class="token punctuation">(</span>from<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">assert</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token keyword">to</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> from<span class="token punctuation">.</span>indices<span class="token punctuation">)</span>              <span class="token keyword">to</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> from<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre></li><li><p>这个函数应该将项目从一个数组复制到另一个数组。让我们尝试在实践中应用它：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> ints<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> any <span class="token operator">=</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">""</span> <span class="token punctuation">}</span>   <span class="token function">copy</span><span class="token punctuation">(</span>ints<span class="token punctuation">,</span> any<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 错误：期望 (Array&lt;Any>, Array&lt;Any>)</span></code></pre></li><li><p>这里我们遇到同样熟悉的问题：<code>Array &lt;T&gt;</code> 在 <code>T</code> 上是<strong>不型变的</strong>，因此 <code>Array &lt;Int&gt;</code> 和 <code>Array &lt;Any&gt;</code> 都不是&lt;!–</p></li><li><p>-&gt;另一个的子类型。为什么？ 再次重复，因为 copy <strong>可能</strong>做坏事，也就是说，例如它可能尝试<strong>写</strong>一个 String 到 <code>from</code>，</p></li><li><p>并且如果我们实际上传递一个 <code>Int</code> 的数组，一段时间后将会抛出一个 <code>ClassCastException</code> 异常。</p></li><li><p>那么，我们唯一要确保的是 <code>copy()</code> 不会做任何坏事。我们想阻止它<strong>写</strong>到 <code>from</code>，我们可以：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">copy</span><span class="token punctuation">(</span>from<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> Any<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span></code></pre></li><li><p>这里发生的事情称为<strong>类型投影</strong>：我们说<code>from</code>不仅仅是一个数组，而是一个受限制的（<strong>投影的</strong>）数组：我们只可以调用返回类型为类型参数 <code>T</code>的方法。</p></li><li><p>如上，这意味着我们只能调用 <code>get()</code>。这就是我们的<strong>使用处型变</strong>的用法，并且是对应于 Java 的 <code>Array&lt;? extends Object&gt;</code>、但使用更简单些的方式。</p></li><li><p>你也可以使用 <strong>in</strong> 投影一个类型：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">fill</span><span class="token punctuation">(</span>dest<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">in</span> String<span class="token operator">></span><span class="token punctuation">,</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span></code></pre></li><li><p><code>Array&lt;in String&gt;</code> 对应于 Java 的 <code>Array&lt;? super String&gt;</code>，也就是说，你可以传递一个 <code>CharSequence</code> 数组或一个 <code>Object</code> 数组给 <code>fill()</code> 函数。</p></li></ul><h2 id="六、星投影"><a href="#六、星投影" class="headerlink" title="六、星投影"></a>六、星投影</h2><ul><li><p>有时你想说，你对类型参数一无所知，但仍然希望以安全的方式使用它。</p></li><li><p>这里的安全方式是定义泛型类型的这种投影，该泛型类型的每个具体实例化将是该投影的子类型。</p></li><li><p>Kotlin 为此提供了所谓的<strong>星投影</strong>语法：</p></li><li><p>对于 <code>Foo &lt;out T&gt;</code>，其中 <code>T</code> 是一个具有上界 <code>TUpper</code> 的协变类型参数，<code>Foo &lt;*&gt;</code> 等价于 <code>Foo &lt;out TUpper&gt;</code>。 这意味着当 <code>T</code> 未知时，你可以安全地从 <code>Foo &lt;*&gt;</code> <em>读取</em> <code>TUpper</code> 的值。</p></li><li><p>对于 <code>Foo &lt;in T&gt;</code>，其中 <code>T</code> 是一个逆变类型参数，<code>Foo &lt;*&gt;</code> 等价于 <code>Foo &lt;in Nothing&gt;</code>。 这意味着当 <code>T</code> 未知时，你可以以安全的方式<em>写入</em> <code>Foo &lt;*&gt;</code>。</p></li><li><p>对于 <code>Foo &lt;T&gt;</code>，其中 <code>T</code> 是一个具有上界 <code>TUpper</code> 的不型变类型参数，<code>Foo&lt;*&gt;</code> 对于读取值时等价于 <code>Foo&lt;out TUpper&gt;</code> 而对于写值时等价于 <code>Foo&lt;in Nothing&gt;</code>。</p></li><li><p>如果泛型类型具有多个类型参数，则每个类型参数都可以单独投影。</p></li><li><p>例如，如果类型被声明为 <code>interface Function &lt;in T, out U&gt;</code>，我们可以想象以下星投影：</p><blockquote><ul><li>1、<code>Function&lt;*, String&gt;</code> 表示 <code>Function&lt;in Nothing, String&gt;</code>；</li><li>2、<code>Function&lt;Int, *&gt;</code> 表示 <code>Function&lt;Int, out Any?&gt;</code>；</li><li>3、<code>Function&lt;*, *&gt;</code> 表示 <code>Function&lt;in Nothing, out Any?&gt;</code>。</li></ul></blockquote></li><li><p><em>注意</em>：星投影非常像 Java 的原始类型，但是安全。</p></li></ul><h2 id="七、泛型函数"><a href="#七、泛型函数" class="headerlink" title="七、泛型函数"></a>七、泛型函数</h2><ul><li><p>不仅类可以有类型参数。函数也可以有。</p></li><li><p>类型参数要放在函数名称之前：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">singletonList</span><span class="token punctuation">(</span>item<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">basicToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 扩展函数</span>          <span class="token comment" spellcheck="true">// ……</span>  <span class="token punctuation">}</span></code></pre></li><li><p>要调用泛型函数，在调用处函数名<strong>之后</strong>指定类型参数即可：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> l <span class="token operator">=</span> singletonList<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><ul><li>我们只要记住 out为生产者、其能够安全的返回，里面不能有插入。int 其能安全的写入，但不能有返回。</li><li>如果你觉得太晦涩难懂，就这么记吧：<strong>out T 等价于 ? extends T，in T 等价于 ? super T</strong>，此外还有 *** 等价于 ?**。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin(二)之数据类、密封类、嵌套类...</title>
      <link href="archives/6fbec79e.html"/>
      <url>archives/6fbec79e.html</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h2><blockquote><p>我们经常创建一些只保存数据的类，在Kotlin中，这叫做<code>数据类</code>并标记为<code>data</code></p></blockquote><h3 id="数据类的声明语法："><a href="#数据类的声明语法：" class="headerlink" title="数据类的声明语法："></a>数据类的声明语法：</h3><ul><li><p>声明一个数据类的完整格式：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token operator">&lt;</span>类名<span class="token operator">></span><span class="token operator">&lt;</span><span class="token punctuation">(</span>主构造函数参数列表<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">:</span> 继承类和实现接口<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*类体*/</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>OK，现在我们可以声明一个简单的数据类：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span></code></pre></li><li><p>编译器自动从主构造函数中声明的所有属性导出以下成员：</p></li><li><p>编译器自动从主构造函数中声明的所有属性导出以下成员：</p><blockquote><ul><li>1、<code>equals()</code>/<code>hashCode()</code> 对；</li><li>2、<code>toString()</code> 格式是 <code>"User(name=John, age=42)"</code>；</li><li>3、<a href="https://www.catbro.cn/detail/multi-declarations.html"><code>componentN()</code> 函数</a> 按声明顺序对应于所有属性；</li><li>4、<code>copy()</code> 函数</li></ul></blockquote></li><li><p>为数据类生成的<code>Component</code>函数，可以在解构声明中使用：</p><pre class=" language-kotlin"><code class="language-kotlin"> <span class="token keyword">val</span> jane <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span> <span class="token keyword">val</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> jane <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$name</span>, <span class="token interpolation variable">$age</span> years of age"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 "Jane, 35 years of age"</span></code></pre></li></ul><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><blockquote><p>当一个值为有限几种的类型，而没有其它类型时。在某种意义上，他们是枚举类的扩展：枚举类型的值集合也是受限的，但每个枚举常量只存在一个实例，而密封类的一个子类可以有可包含状态的多个实例。</p><p>要声明一个密封类，需要在类名前面添加<code>sealed</code>修饰符。虽然密封类也可以有子类，但是所有子类都必须在与密封类自身相同的文件中声明。实例如下：</p></blockquote><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">sealed</span> <span class="token keyword">class</span> Expr<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Const</span><span class="token punctuation">(</span><span class="token keyword">val</span> number<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">val</span> e1<span class="token operator">:</span> Expr<span class="token punctuation">,</span> <span class="token keyword">val</span> e2<span class="token operator">:</span> Expr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">object</span> NotANumber <span class="token operator">:</span> <span class="token function">Expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>一个密封类自身是<code>抽象的</code>，它不能直接实例化并可以有抽象成员</li><li>密封类不允许有非<code>private</code>构造函数（其构造函数默认为<code>private</code>）</li></ul><p>使用密封类的好处在于我们使用<code>when</code>表达式的时候，如果能够验证语句覆盖了所有情况，就不需要再添加一个<code>else</code>语句了。当然，这只有当用when作为表达式而不是作为语句时才有用。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">eval</span><span class="token punctuation">(</span>expr<span class="token operator">:</span> Expr<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token keyword">when</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Const <span class="token operator">-></span> expr<span class="token punctuation">.</span>number    <span class="token keyword">is</span> Sum <span class="token operator">-></span> <span class="token function">eval</span><span class="token punctuation">(</span>expr<span class="token punctuation">.</span>e1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">eval</span><span class="token punctuation">(</span>expr<span class="token punctuation">.</span>e2<span class="token punctuation">)</span>    NotANumber <span class="token operator">-></span> Double<span class="token punctuation">.</span>NaN    <span class="token comment" spellcheck="true">// 不再需要 `else` 子句，因为已经覆盖了所有的情况</span><span class="token punctuation">}</span></code></pre><ul><li>如果向<code>Expr</code>类新增一个属性，而在eval的<code>when</code>语句当中没有指定具体的处理情况，那么eval方法将无法通过编译。</li><li>Kotlin就是通过这种方法来保证执行到<code>eval</code>方法时验证语句能够覆盖到所有情况。</li></ul><h2 id="嵌套类与内部类"><a href="#嵌套类与内部类" class="headerlink" title="嵌套类与内部类"></a>嵌套类与内部类</h2><p>类可以嵌套在其他类中：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> bar<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">class</span> Nested <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">val</span> demo <span class="token operator">=</span> Outer<span class="token punctuation">.</span><span class="token function">Nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// == 2</span></code></pre><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>标记为<code>inner</code>的嵌套类能够访问其外部类的成员。内部类会带有一个对外部类的对象的引用：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> bar<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">inner</span> <span class="token keyword">class</span> Inner <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> bar    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">val</span> demo <span class="token operator">=</span> <span class="token function">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// == 1</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin(一)之基本语法学习</title>
      <link href="archives/5376edd0.html"/>
      <url>archives/5376edd0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin之基本语法学习"><a href="#Kotlin之基本语法学习" class="headerlink" title="Kotlin之基本语法学习"></a>Kotlin之基本语法学习</h1><h2 id="创建数据类"><a href="#创建数据类" class="headerlink" title="创建数据类"></a>创建数据类</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">val</span> email<span class="token operator">:</span>String<span class="token punctuation">)</span></code></pre><p>此段代码会自动为<code>Customer</code>类添加以下功能：</p><p>—所有属性的getters方法（如果是var定义的还有setters方法）</p><p>—<code>equals()、hashCode()、toString()、copy()</code></p><p>—-所有属性的 <code>component1()</code>、 <code>component2()</code>……等等</p><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre><h2 id="过滤-list"><a href="#过滤-list" class="headerlink" title="过滤 list"></a>过滤 list</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> positives <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre><p>或者可以更短:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> positives <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre><h2 id="检测元素是否存在于集合中"><a href="#检测元素是否存在于集合中" class="headerlink" title="检测元素是否存在于集合中"></a>检测元素是否存在于集合中</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"john@example.com"</span> <span class="token keyword">in</span> emailsList<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"jane@example.com"</span> <span class="token operator">!</span><span class="token keyword">in</span> emailsList<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre><h2 id="字符串内插"><a href="#字符串内插" class="headerlink" title="字符串内插"></a>字符串内插</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name <span class="token interpolation variable">$name</span>"</span><span class="token punctuation">)</span></code></pre><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Foo <span class="token comment" spellcheck="true">//-> ……</span>    <span class="token keyword">is</span> Bar <span class="token comment" spellcheck="true">//-> ……</span>    <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">//-> ……</span><span class="token punctuation">}</span></code></pre><h2 id="遍历-map-pair型list"><a href="#遍历-map-pair型list" class="headerlink" title="遍历 map/pair型list"></a>遍历 map/pair型list</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$k</span> -> <span class="token interpolation variable">$v</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码中k，v可以更改成任意名字</p><h2 id="使用区间"><a href="#使用区间" class="headerlink" title="使用区间"></a>使用区间</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 闭区间：包含 100</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 半开区间：不包含 100</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">..</span><span class="token number">10</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 2 4 6 8 10</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//10 9 8 7...1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre><h2 id="读-list"><a href="#读-list" class="headerlink" title="读 list"></a>读 list</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span></code></pre><h2 id="只读-map"><a href="#只读-map" class="headerlink" title="只读 map"></a>只读 map</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><h2 id="访问-map"><a href="#访问-map" class="headerlink" title="访问 map"></a>访问 map</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>map<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> value</code></pre><h2 id="延迟属性：Lazy"><a href="#延迟属性：Lazy" class="headerlink" title="延迟属性：Lazy"></a>延迟属性：Lazy</h2><ul><li><p>用法很简单，你只需要记住Lazy关键字即可</p></li><li><p>lazy() 是接受一个 lambda 并返回一个 <code>Lazy &lt;T&gt;</code> 实例的函数，返回的实例可以作为实现延迟属性的委托：</p></li><li><p>第一次调用 get() 会执行已传递给 lazy() 的 lambda 表达式并记录结果，后续调用 get() 只是返回记录的结果。</p></li><li><p>测试代码如下</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> lazyValue<span class="token operator">:</span> String <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"computed!"</span><span class="token punctuation">)</span>          <span class="token string">"Anjie"</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">println</span><span class="token punctuation">(</span>lazyValue<span class="token punctuation">)</span>          <span class="token function">println</span><span class="token punctuation">(</span>lazyValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li><li><p>结果输出为：</p><pre class=" language-kotlin"><code class="language-kotlin">  computed<span class="token operator">!</span>  <span class="token comment" spellcheck="true">//第一次调用会直接执行lazy的lambda表达式</span>  Anjie  Anjie   <span class="token comment" spellcheck="true">//第二次直接返回结果</span></code></pre></li></ul><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><ul><li>扩展类的函数，即Extension Function , 可以在已有类中添加新的方法, 比继承更加简洁和优雅.</li><li>函数的扩展其实是一个非常实用的特性</li></ul><h3 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h3><ul><li>在Kotlin中，允许在不需要继承或使用 Decorator 模式情况下通过一种特殊形式的声明对类进行扩展，实现某一具体功能。</li><li>扩展函数是静态解析的，并未对原类增添函数或者属性，也就是说对其本身没有丝毫影响。</li></ul><h3 id="三、定义形式"><a href="#三、定义形式" class="headerlink" title="三、定义形式"></a>三、定义形式</h3><h4 id="1、扩展函数定义形式"><a href="#1、扩展函数定义形式" class="headerlink" title="1、扩展函数定义形式"></a>1、扩展函数定义形式</h4><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> receiverType    <span class="token punctuation">.</span><span class="token function">functionName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>      body  <span class="token punctuation">}</span></code></pre><blockquote><ul><li>receiverType表示函数的接受者，也就是类名</li><li>functionName表示扩展函数的名称</li><li>params表示扩展函数的参数，可以为NULL</li><li>扩展函数并没有对原类做修改，而是为原类的对象添加新的函数</li></ul></blockquote><ul><li><p>示例代码如下：我们对Int类进行扩展</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> Int<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,I am weeeeiiii"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> a <span class="token operator">:</span>Int <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>运行结果为hello,I am weeeeiiii</p></li></ul><h4 id="2、扩展函数是静态解析的"><a href="#2、扩展函数是静态解析的" class="headerlink" title="2、扩展函数是静态解析的"></a>2、扩展函数是静态解析的</h4><ul><li><p>Kotlin的扩展函数时静态解析的，并不是作为接收者类型的虚拟成员而存在</p></li><li><p>静态解析也就意味着调用扩展函数时，具体被调用的是哪一个函数，由调用函数的对象表达式来决定的，而不是动态的类型决定的。</p></li><li><p>例子：声明了两个类Person和Student,其中Student继承于Person。</p></li><li><p>示例代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Person <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> Student <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Person"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Student"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> <span class="token function">sayGoodby</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BoodBy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sayGoodby</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>运行结果如下：</p><pre class=" language-kotlin"><code class="language-kotlin">  I am Student  I am Person  I am Person  BoodBy</code></pre></li><li><p>代码解析：</p></li><li><p>我们分别对<code>Person</code>和<code>Student</code>声明扩展函数sayHello()，又声明了sayGoodby（）方法，其参数是一个Person对象，在其方法体内,调用了Person的扩展函数。</p></li><li><p>在调用案例中，创建了一个Student对象student，调用student的扩展函数sayHello，打印了I am Student；创建一个Person对象person，调用扩展函数sayHello，打印了I am Person，说明扩展方法是跟着类走的。</p></li><li><p>最后我们调用sayGoodby方法，传入的student实例，注意了，我们的Student继承自Person，此时打印的sayHello仍然为Person的扩展方法。</p></li><li><p>从中我们能够得出一个结论，<code>扩展函数的调用跟着对象类型走，而非实际对象实例</code>。你可以认为是kotlin在编译时为扩展方法指定的类添加的静态方法。</p></li></ul><h4 id="3、类成员函数与类扩展函数相同问题"><a href="#3、类成员函数与类扩展函数相同问题" class="headerlink" title="3、类成员函数与类扩展函数相同问题"></a>3、类成员函数与类扩展函数相同问题</h4><ul><li><p>当类的成员函数与扩展函数一摸一样是，是调用扩展函数还是成员函数呢？</p></li><li><p>带着这样的疑问我们来实践一下</p></li><li><p>示例代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Person <span class="token punctuation">{</span>      <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是person类成员函数"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> Student <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am  Person"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Student"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> <span class="token function">sayGoodby</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BoodBy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sayGoodby</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>结果输出如下：</p></li></ul><p><code> 我是person类成员函数 我是person类成员函数 我是person类成员函数 BoodBy</code></p><ul><li>可以看到，当类成员函数与方法成员函数一致时，调用的时类成员函数。</li></ul><h3 id="四、扩展属性"><a href="#四、扩展属性" class="headerlink" title="四、扩展属性"></a>四、扩展属性</h3><ul><li><p>扩展属性，即Extension Property，即把某些函数添加为数据，使用”=”, 直接设置或使用。</p></li><li><p>通过扩展属性，我们可以像添加扩展函数一样给类添加扩展属性，当然，扩展属性也是静态编译的。所以扩展属性实际上不会向类添加新的成员, 扩展属性的行为只能通过明确给定的取值方法与设值方法来定义。</p></li><li><p>扩展属性只能被声明为val而不能被声明为var.</p></li><li><p>示例代码如下：我们给Int类添加一个name属性，访问该属性直接返回Int对应的String形式的值</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> Int<span class="token punctuation">.</span>name<span class="token operator">:</span>String      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation builtin">@Test</span>      <span class="token keyword">fun</span> <span class="token function">test14</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token punctuation">}</span> </code></pre></li><li><p>运行结果为：100</p></li></ul><h2 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> Resource <span class="token punctuation">{</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">}</span></code></pre><p>在类声明前加<code>object</code></p><h2 id="If-not-null-缩写"><a href="#If-not-null-缩写" class="headerlink" title="If not null 缩写"></a>If not null 缩写</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> files <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>files<span class="token operator">?</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><h2 id="If-not-null-and-else-缩写"><a href="#If-not-null-and-else-缩写" class="headerlink" title="If not null and else 缩写"></a>If not null and else 缩写</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> files <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>files<span class="token operator">?</span><span class="token punctuation">.</span>size <span class="token operator">?:</span> <span class="token string">"empty"</span><span class="token punctuation">)</span></code></pre><h2 id="if-null-执行一个语句"><a href="#if-null-执行一个语句" class="headerlink" title="if null 执行一个语句"></a>if null 执行一个语句</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> values <span class="token operator">=</span> ……<span class="token keyword">val</span> email <span class="token operator">=</span> values<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Email is missing!"</span><span class="token punctuation">)</span></code></pre><h2 id="在可能会空的集合中取第一元素（firstOrNull）"><a href="#在可能会空的集合中取第一元素（firstOrNull）" class="headerlink" title="在可能会空的集合中取第一元素（firstOrNull）"></a>在可能会空的集合中取第一元素（firstOrNull）</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> emails <span class="token operator">=</span> …… <span class="token comment" spellcheck="true">// 可能会是空集合</span><span class="token keyword">val</span> mainEmail <span class="token operator">=</span> emails<span class="token punctuation">.</span><span class="token function">firstOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string">""</span></code></pre><h2 id="if-not-null-执行代码"><a href="#if-not-null-执行代码" class="headerlink" title="if not null 执行代码"></a>if not null 执行代码</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> value <span class="token operator">=</span> ……value<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    …… <span class="token comment" spellcheck="true">// 代码会执行到此处, 假如value不为null</span><span class="token punctuation">}</span></code></pre><h2 id="对一个对象实例调用多个方法-（with）"><a href="#对一个对象实例调用多个方法-（with）" class="headerlink" title="对一个对象实例调用多个方法 （with）"></a>对一个对象实例调用多个方法 （<code>with</code>）</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Turtle <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">turn</span><span class="token punctuation">(</span>degrees<span class="token operator">:</span> Double<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">forward</span><span class="token punctuation">(</span>pixels<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">val</span> myTurtle <span class="token operator">=</span> <span class="token function">Turtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">with</span><span class="token punctuation">(</span>myTurtle<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 画一个 100 像素的正方形</span>    <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">)</span>        <span class="token function">turn</span><span class="token punctuation">(</span><span class="token number">90.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="配置对象的属性（apply）"><a href="#配置对象的属性（apply）" class="headerlink" title="配置对象的属性（apply）"></a>配置对象的属性（<code>apply</code>）</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> myRectangle <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    length <span class="token operator">=</span> <span class="token number">4</span>    breadth <span class="token operator">=</span> <span class="token number">5</span>    color <span class="token operator">=</span> <span class="token number">0xFAFAFA</span><span class="token punctuation">}</span></code></pre><p><code>这对于配置未出现在对象构造函数中的属性非常有用。</code></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee+PicGo+Typora实现个人博客稳定的高速图床</title>
      <link href="archives/f8364fc.html"/>
      <url>archives/f8364fc.html</url>
      
        <content type="html"><![CDATA[<p>我的个人博客地址：<a href="http://ultrawith.me/">weeeeiiii的个人博客</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>相信很多人都会使用<code>Hexo</code>配合<code>github</code>来搭建一个自己的个人博客，但由于github服务器在国外，所以我们有时打开博客经常会出现加载10几s的场景，访问速度极慢。这里我们可以配合<code>PicGo+Gitee+Typora</code>实现个人高速稳定图床。以下安装在mac系统上实现，windows配置过程与mac相差无几</p></blockquote><h1 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h1><ol><li><p>安装<a href="https://molunerfinn.com/PicGo/">PicGo</a>客户端</p></li><li><p>在Picgo里面安装Gitee扩展插件</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.17.07.png" alt="安装gitee插件"></p><p>上图中两个插件差不多，任选一个即可。</p></li></ol><h1 id="注册Gitte账号并创建gitee仓库"><a href="#注册Gitte账号并创建gitee仓库" class="headerlink" title="注册Gitte账号并创建gitee仓库"></a>注册Gitte账号并创建gitee仓库</h1><ol><li><p>在<a href="https://gitee.com/">Gitee</a>上面注册一个账号，创建一个仓库</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.23.30.png" alt="Gitee"></p><p>这里举例创建一个名称为<code>image</code>的仓库，仓库要选公开类型</p></li><li><p>在设置中下拉找到私人令牌，点击创建私人令牌（Token）自行保存好，它只会在创建的时候显示一次，之后就不再显示，只能重新生成或者创建</p></li></ol><h1 id="配置Picgo上的Gitee"><a href="#配置Picgo上的Gitee" class="headerlink" title="配置Picgo上的Gitee"></a>配置Picgo上的Gitee</h1><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.27.59.min.png" alt="PicGo"></p><p>设置完成后，点击确定以及<code>设为默认图床</code></p><h1 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h1><p>来到Typora设置界面，点击<code>验证图片上传选项</code>，若上传成功则会显示success信息，并在Gitee的image仓库中，会显示出刚上传的两张图片</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.35.04.png" alt="Typora"></p><h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><p>若以上步骤均已完成，但是在Typora编辑的过程中，插入图片依旧出现下图错误</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/image-20201101204125145.png" alt="上传失败"></p><p>这时，如果复制图片地址，粘贴到浏览器上，浏览器却正确显示图片，这说明我们的确是把图片上传到了我们Gitee上的个人图床上，图片链接没有问题。那么为什么Typora中却显示<code>image load failed</code>呢？</p><p>emmmmmmmmmmmm……………</p><p>其实只要我们换个没有登陆过Gitee的浏览器或者将浏览器的缓存清空即可发现原因，如下图</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/image-20201101204723314.png" alt="emmmm...."></p><p>emmmm。。。Gitee默认文件如果大于1M，那么就需要登录账号才能访问。。。这就是为什么Typora显示不了图片的原因</p><p>那么既然发现了问题，解决这个问题也很简单，压缩图片体积就可以了。Mac用户推荐使用<a href="https://www.electronjs.org/apps/image-shrinker">Image Shrinker</a>，一款非常好用的图片压缩工具。下图是我用该软件压缩刚才上传失败的图片大小前后的体积对比</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/image-20201101205624010.png" alt="图片体积对比"></p><p>这时我再尝试插入图片<img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%96%87%E4%BB%B61.min.jpg"></p><p>可以看到图片显示成功，并且清晰度也是非常高的</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitee </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="archives/1c291ca3.html"/>
      <url>archives/1c291ca3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><blockquote><p><em>Le vent se lève, il faut tenter de vivre. 起风了，唯有努力生存</em></p></blockquote><p>欢迎来到<strong>Wei</strong>的个人博客！在这里我将会持续更新一些技术上的笔记，记录我解决问题的过程，以及分享一些自己喜欢的电影。</p><p>本人就读于华中科技大学<code>单身咳咳</code> ，平时喜欢写代码看电影，爱好日本特摄<code>假面骑士，奥特曼</code>。创建这个博客是为了方便自己复习使用，网站名称叫<code>Ultrawith.me</code>，其中Ultra是源自<a href="https://baike.baidu.com/item/%E5%A5%A5%E7%89%B9%E6%9B%BC/19825594?fr=aladdin">Ultraman</a>，咳咳，二十年特摄老粉在此。</p><p>本人目前大四，拿到字节客户端offer准备去<code>体验打工人生活</code>，本人的lajihub<a href="https://github.com/weeeeiiii">在此</a>，QQ<code>1142529848</code>，欢迎大家来找我聊天or进行技术交流<code>拒绝🤺</code>。</p><p>图片是我非常喜欢的一部电影《起风了》。</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/p2181455547.jpg.min.png" alt="老爷子御用女主"></p><p>最后再分享一首<code>攻壳机动队</code>的歌 《<em>i do</em>》，谢谢大家。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="52" src="//music.163.com/outchain/player?type=2&amp;id=590011&amp;auto=1&amp;height=32"></iframe>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> myfirst-commit </tag>
            
            <tag> 起风了 </tag>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
