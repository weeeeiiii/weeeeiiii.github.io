<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kotlin(一)之基本语法学习</title>
      <link href="archives/5376edd0.html"/>
      <url>archives/5376edd0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin之基本语法学习"><a href="#Kotlin之基本语法学习" class="headerlink" title="Kotlin之基本语法学习"></a>Kotlin之基本语法学习</h1><h2 id="创建数据类"><a href="#创建数据类" class="headerlink" title="创建数据类"></a>创建数据类</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">val</span> email<span class="token operator">:</span>String<span class="token punctuation">)</span></code></pre><p>此段代码会自动为<code>Customer</code>类添加以下功能：</p><p>—所有属性的getters方法（如果是var定义的还有setters方法）</p><p>—<code>equals()、hashCode()、toString()、copy()</code></p><p>—-所有属性的 <code>component1()</code>、 <code>component2()</code>……等等</p><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre><h2 id="过滤-list"><a href="#过滤-list" class="headerlink" title="过滤 list"></a>过滤 list</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> positives <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre><p>或者可以更短:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> positives <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre><h2 id="检测元素是否存在于集合中"><a href="#检测元素是否存在于集合中" class="headerlink" title="检测元素是否存在于集合中"></a>检测元素是否存在于集合中</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"john@example.com"</span> <span class="token keyword">in</span> emailsList<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"jane@example.com"</span> <span class="token operator">!</span><span class="token keyword">in</span> emailsList<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre><h2 id="字符串内插"><a href="#字符串内插" class="headerlink" title="字符串内插"></a>字符串内插</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name <span class="token interpolation variable">$name</span>"</span><span class="token punctuation">)</span></code></pre><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Foo <span class="token comment" spellcheck="true">//-> ……</span>    <span class="token keyword">is</span> Bar <span class="token comment" spellcheck="true">//-> ……</span>    <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">//-> ……</span><span class="token punctuation">}</span></code></pre><h2 id="遍历-map-pair型list"><a href="#遍历-map-pair型list" class="headerlink" title="遍历 map/pair型list"></a>遍历 map/pair型list</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$k</span> -> <span class="token interpolation variable">$v</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码中k，v可以更改成任意名字</p><h2 id="使用区间"><a href="#使用区间" class="headerlink" title="使用区间"></a>使用区间</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 闭区间：包含 100</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 半开区间：不包含 100</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">..</span><span class="token number">10</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 2 4 6 8 10</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//10 9 8 7...1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre><h2 id="读-list"><a href="#读-list" class="headerlink" title="读 list"></a>读 list</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span></code></pre><h2 id="只读-map"><a href="#只读-map" class="headerlink" title="只读 map"></a>只读 map</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><h2 id="访问-map"><a href="#访问-map" class="headerlink" title="访问 map"></a>访问 map</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>map<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> value</code></pre><h2 id="延迟属性：Lazy"><a href="#延迟属性：Lazy" class="headerlink" title="延迟属性：Lazy"></a>延迟属性：Lazy</h2><ul><li><p>用法很简单，你只需要记住Lazy关键字即可</p></li><li><p>lazy() 是接受一个 lambda 并返回一个 <code>Lazy &lt;T&gt;</code> 实例的函数，返回的实例可以作为实现延迟属性的委托：</p></li><li><p>第一次调用 get() 会执行已传递给 lazy() 的 lambda 表达式并记录结果，后续调用 get() 只是返回记录的结果。</p></li><li><p>测试代码如下</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> lazyValue<span class="token operator">:</span> String <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"computed!"</span><span class="token punctuation">)</span>          <span class="token string">"Anjie"</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">println</span><span class="token punctuation">(</span>lazyValue<span class="token punctuation">)</span>          <span class="token function">println</span><span class="token punctuation">(</span>lazyValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li><li><p>结果输出为：</p><pre class=" language-kotlin"><code class="language-kotlin">  computed<span class="token operator">!</span>  <span class="token comment" spellcheck="true">//第一次调用会直接执行lazy的lambda表达式</span>  Anjie  Anjie   <span class="token comment" spellcheck="true">//第二次直接返回结果</span></code></pre></li></ul><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><ul><li>扩展类的函数，即Extension Function , 可以在已有类中添加新的方法, 比继承更加简洁和优雅.</li><li>函数的扩展其实是一个非常实用的特性</li></ul><h3 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h3><ul><li>在Kotlin中，允许在不需要继承或使用 Decorator 模式情况下通过一种特殊形式的声明对类进行扩展，实现某一具体功能。</li><li>扩展函数是静态解析的，并未对原类增添函数或者属性，也就是说对其本身没有丝毫影响。</li></ul><h3 id="三、定义形式"><a href="#三、定义形式" class="headerlink" title="三、定义形式"></a>三、定义形式</h3><h4 id="1、扩展函数定义形式"><a href="#1、扩展函数定义形式" class="headerlink" title="1、扩展函数定义形式"></a>1、扩展函数定义形式</h4><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> receiverType    <span class="token punctuation">.</span><span class="token function">functionName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>      body  <span class="token punctuation">}</span></code></pre><blockquote><ul><li>receiverType表示函数的接受者，也就是类名</li><li>functionName表示扩展函数的名称</li><li>params表示扩展函数的参数，可以为NULL</li><li>扩展函数并没有对原类做修改，而是为原类的对象添加新的函数</li></ul></blockquote><ul><li><p>示例代码如下：我们对Int类进行扩展</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> Int<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,I am weeeeiiii"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> a <span class="token operator">:</span>Int <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>运行结果为hello,I am weeeeiiii</p></li></ul><h4 id="2、扩展函数是静态解析的"><a href="#2、扩展函数是静态解析的" class="headerlink" title="2、扩展函数是静态解析的"></a>2、扩展函数是静态解析的</h4><ul><li><p>Kotlin的扩展函数时静态解析的，并不是作为接收者类型的虚拟成员而存在</p></li><li><p>静态解析也就意味着调用扩展函数时，具体被调用的是哪一个函数，由调用函数的对象表达式来决定的，而不是动态的类型决定的。</p></li><li><p>例子：声明了两个类Person和Student,其中Student继承于Person。</p></li><li><p>示例代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Person <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> Student <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Person"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Student"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> <span class="token function">sayGoodby</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BoodBy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sayGoodby</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>运行结果如下：</p><pre class=" language-kotlin"><code class="language-kotlin">  I am Student  I am Person  I am Person  BoodBy</code></pre></li><li><p>代码解析：</p></li><li><p>我们分别对<code>Person</code>和<code>Student</code>声明扩展函数sayHello()，又声明了sayGoodby（）方法，其参数是一个Person对象，在其方法体内,调用了Person的扩展函数。</p></li><li><p>在调用案例中，创建了一个Student对象student，调用student的扩展函数sayHello，打印了I am Student；创建一个Person对象person，调用扩展函数sayHello，打印了I am Person，说明扩展方法是跟着类走的。</p></li><li><p>最后我们调用sayGoodby方法，传入的student实例，注意了，我们的Student继承自Person，此时打印的sayHello仍然为Person的扩展方法。</p></li><li><p>从中我们能够得出一个结论，<code>扩展函数的调用跟着对象类型走，而非实际对象实例</code>。你可以认为是kotlin在编译时为扩展方法指定的类添加的静态方法。</p></li></ul><h4 id="3、类成员函数与类扩展函数相同问题"><a href="#3、类成员函数与类扩展函数相同问题" class="headerlink" title="3、类成员函数与类扩展函数相同问题"></a>3、类成员函数与类扩展函数相同问题</h4><ul><li><p>当类的成员函数与扩展函数一摸一样是，是调用扩展函数还是成员函数呢？</p></li><li><p>带着这样的疑问我们来实践一下</p></li><li><p>示例代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Person <span class="token punctuation">{</span>      <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是person类成员函数"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> Student <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am  Person"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> Student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Student"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fun</span> <span class="token function">sayGoodby</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BoodBy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token annotation builtin">@Test</span>  <span class="token keyword">fun</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sayGoodby</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>结果输出如下：</p></li></ul><p><code> 我是person类成员函数 我是person类成员函数 我是person类成员函数 BoodBy</code></p><ul><li>可以看到，当类成员函数与方法成员函数一致时，调用的时类成员函数。</li></ul><h3 id="四、扩展属性"><a href="#四、扩展属性" class="headerlink" title="四、扩展属性"></a>四、扩展属性</h3><ul><li><p>扩展属性，即Extension Property，即把某些函数添加为数据，使用”=”, 直接设置或使用。</p></li><li><p>通过扩展属性，我们可以像添加扩展函数一样给类添加扩展属性，当然，扩展属性也是静态编译的。所以扩展属性实际上不会向类添加新的成员, 扩展属性的行为只能通过明确给定的取值方法与设值方法来定义。</p></li><li><p>扩展属性只能被声明为val而不能被声明为var.</p></li><li><p>示例代码如下：我们给Int类添加一个name属性，访问该属性直接返回Int对应的String形式的值</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> Int<span class="token punctuation">.</span>name<span class="token operator">:</span>String      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation builtin">@Test</span>      <span class="token keyword">fun</span> <span class="token function">test14</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token punctuation">}</span> </code></pre></li><li><p>运行结果为：100</p></li></ul><h2 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> Resource <span class="token punctuation">{</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">}</span></code></pre><h2 id="If-not-null-缩写"><a href="#If-not-null-缩写" class="headerlink" title="If not null 缩写"></a>If not null 缩写</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> files <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>files<span class="token operator">?</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><h2 id="If-not-null-and-else-缩写"><a href="#If-not-null-and-else-缩写" class="headerlink" title="If not null and else 缩写"></a>If not null and else 缩写</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> files <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>files<span class="token operator">?</span><span class="token punctuation">.</span>size <span class="token operator">?:</span> <span class="token string">"empty"</span><span class="token punctuation">)</span></code></pre><h2 id="if-null-执行一个语句"><a href="#if-null-执行一个语句" class="headerlink" title="if null 执行一个语句"></a>if null 执行一个语句</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> values <span class="token operator">=</span> ……<span class="token keyword">val</span> email <span class="token operator">=</span> values<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Email is missing!"</span><span class="token punctuation">)</span></code></pre><h2 id="在可能会空的集合中取第一元素"><a href="#在可能会空的集合中取第一元素" class="headerlink" title="在可能会空的集合中取第一元素"></a>在可能会空的集合中取第一元素</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> emails <span class="token operator">=</span> …… <span class="token comment" spellcheck="true">// 可能会是空集合</span><span class="token keyword">val</span> mainEmail <span class="token operator">=</span> emails<span class="token punctuation">.</span><span class="token function">firstOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string">""</span></code></pre><h2 id="if-not-null-执行代码"><a href="#if-not-null-执行代码" class="headerlink" title="if not null 执行代码"></a>if not null 执行代码</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> value <span class="token operator">=</span> ……value<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    …… <span class="token comment" spellcheck="true">// 代码会执行到此处, 假如value不为null</span><span class="token punctuation">}</span></code></pre><h2 id="对一个对象实例调用多个方法-（with）"><a href="#对一个对象实例调用多个方法-（with）" class="headerlink" title="对一个对象实例调用多个方法 （with）"></a>对一个对象实例调用多个方法 （<code>with</code>）</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Turtle <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">turn</span><span class="token punctuation">(</span>degrees<span class="token operator">:</span> Double<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">forward</span><span class="token punctuation">(</span>pixels<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">val</span> myTurtle <span class="token operator">=</span> <span class="token function">Turtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">with</span><span class="token punctuation">(</span>myTurtle<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 画一个 100 像素的正方形</span>    <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">)</span>        <span class="token function">turn</span><span class="token punctuation">(</span><span class="token number">90.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="配置对象的属性（apply）"><a href="#配置对象的属性（apply）" class="headerlink" title="配置对象的属性（apply）"></a>配置对象的属性（<code>apply</code>）</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> myRectangle <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    length <span class="token operator">=</span> <span class="token number">4</span>    breadth <span class="token operator">=</span> <span class="token number">5</span>    color <span class="token operator">=</span> <span class="token number">0xFAFAFA</span><span class="token punctuation">}</span></code></pre><p>这对于配置未出现在对象构造函数中的属性非常有用。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee+PicGo+Typora实现个人博客稳定的高速图床</title>
      <link href="archives/f8364fc.html"/>
      <url>archives/f8364fc.html</url>
      
        <content type="html"><![CDATA[<p>我的个人博客地址：<a href="http://ultrawith.me/">weeeeiiii的个人博客</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>相信很多人都会使用<code>Hexo</code>配合<code>github</code>来搭建一个自己的个人博客，但由于github服务器在国外，所以我们有时打开博客经常会出现加载10几s的场景，访问速度极慢。这里我们可以配合<code>PicGo+Gitee+Typora</code>实现个人高速稳定图床。以下安装在mac系统上实现，windows配置过程与mac相差无几</p></blockquote><h1 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h1><ol><li><p>安装<a href="https://molunerfinn.com/PicGo/">PicGo</a>客户端</p></li><li><p>在Picgo里面安装Gitee扩展插件</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.17.07.png" alt="安装gitee插件"></p><p>上图中两个插件差不多，任选一个即可。</p></li></ol><h1 id="注册Gitte账号并创建gitee仓库"><a href="#注册Gitte账号并创建gitee仓库" class="headerlink" title="注册Gitte账号并创建gitee仓库"></a>注册Gitte账号并创建gitee仓库</h1><ol><li><p>在<a href="https://gitee.com/">Gitee</a>上面注册一个账号，创建一个仓库</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.23.30.png" alt="Gitee"></p><p>这里举例创建一个名称为<code>image</code>的仓库，仓库要选公开类型</p></li><li><p>在设置中下拉找到私人令牌，点击创建私人令牌（Token）自行保存好，它只会在创建的时候显示一次，之后就不再显示，只能重新生成或者创建</p></li></ol><h1 id="配置Picgo上的Gitee"><a href="#配置Picgo上的Gitee" class="headerlink" title="配置Picgo上的Gitee"></a>配置Picgo上的Gitee</h1><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.27.59.min.png" alt="PicGo"></p><p>设置完成后，点击确定以及<code>设为默认图床</code></p><h1 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h1><p>来到Typora设置界面，点击<code>验证图片上传选项</code>，若上传成功则会显示success信息，并在Gitee的image仓库中，会显示出刚上传的两张图片</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%88%AA%E5%B1%8F2020-11-01%20%E4%B8%8B%E5%8D%888.35.04.png" alt="Typora"></p><h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><p>若以上步骤均已完成，但是在Typora编辑的过程中，插入图片依旧出现下图错误</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/image-20201101204125145.png" alt="上传失败"></p><p>这时，如果复制图片地址，粘贴到浏览器上，浏览器却正确显示图片，这说明我们的确是把图片上传到了我们Gitee上的个人图床上，图片链接没有问题。那么为什么Typora中却显示<code>image load failed</code>呢？</p><p>emmmmmmmmmmmm……………</p><p>其实只要我们换个没有登陆过Gitee的浏览器或者将浏览器的缓存清空即可发现原因，如下图</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/image-20201101204723314.png" alt="emmmm...."></p><p>emmmm。。。Gitee默认文件如果大于1M，那么就需要登录账号才能访问。。。这就是为什么Typora显示不了图片的原因</p><p>那么既然发现了问题，解决这个问题也很简单，压缩图片体积就可以了。Mac用户推荐使用<a href="https://www.electronjs.org/apps/image-shrinker">Image Shrinker</a>，一款非常好用的图片压缩工具。下图是我用该软件压缩刚才上传失败的图片大小前后的体积对比</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/image-20201101205624010.png" alt="图片体积对比"></p><p>这时我再尝试插入图片<img src="https://gitee.com/weeeeeei/images/raw/master/img/%E6%96%87%E4%BB%B61.min.jpg"></p><p>可以看到图片显示成功，并且清晰度也是非常高的</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitee </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="archives/1c291ca3.html"/>
      <url>archives/1c291ca3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><blockquote><p><em>Le vent se lève, il faut tenter de vivre. 起风了，唯有努力生存</em></p></blockquote><p>欢迎来到<strong>Wei</strong>的个人博客！在这里我将会持续更新一些技术上的笔记，记录我解决问题的过程，以及分享一些自己喜欢的电影。</p><p>本人就读于华中科技大学<code>单身咳咳</code> ，平时喜欢写代码看电影，爱好日本特摄<code>假面骑士，奥特曼</code>。创建这个博客是为了方便自己复习使用，网站名称叫<code>Ultrawith.me</code>，其中Ultra是源自<a href="https://baike.baidu.com/item/%E5%A5%A5%E7%89%B9%E6%9B%BC/19825594?fr=aladdin">Ultraman</a>，咳咳，二十年特摄老粉在此。</p><p>本人目前大四，拿到字节客户端offer准备去<code>体验打工人生活</code>，本人的lajihub<a href="https://github.com/weeeeiiii">在此</a>，QQ<code>1142529848</code>，欢迎大家来找我聊天or进行技术交流<code>拒绝🤺</code>。</p><p>图片是我非常喜欢的一部电影《起风了》。</p><p><img src="https://gitee.com/weeeeeei/images/raw/master/img/p2181455547.jpg.min.png" alt="老爷子御用女主"></p><p>最后再分享一首<code>攻壳机动队</code>的歌 《<em>i do</em>》，谢谢大家。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="52" src="//music.163.com/outchain/player?type=2&amp;id=590011&amp;auto=1&amp;height=32"></iframe>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> myfirst-commit </tag>
            
            <tag> 起风了 </tag>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
